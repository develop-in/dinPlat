<?xml version="1.0" encoding= "UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="port">

	<!-- 포트폴리오 List -->
    <select id="portList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select oa.*, concat(@rownum := @rownum + 1) as no
		from  (select a.stockno as stockNo, 
			       	  e.stockname as stockName,
			       	  case a.position 
			   			   when '1' then '매수'
			   			   when '2' then '매도'
			   			   end as position,
			   		  case a.positiongrade
			   		  	   when '1' then '관망'
			   		  	   when '2' then '매매대기'
			   		  	   when '3' then '적극매매'
			   		  	   when '4' then '무조건매매'
			   		  	   end as positionGrade,
			   		  case a.hot
			   		  	   when '1' then '보통'
			   		  	   when '2' then '유의관찰'
			   		  	   when '3' then '적극관찰'
			   		  	   when '4' then 'BEST'
			   		  	   end as hot,
			   		  b.dailycomment as dailyComment,
			   		  sum(k.count) as stockCount,
			   		  count(distinct d.newsno) as newsCount,
			   		  case b.position 
			   			   when '1' then '매수'
			   			   when '2' then '매도'
			   			   end as tradeSignal
			   from   sg_portfolio a
			   		  left outer join sg_daily_analysis b
			   		  	on a.stockno = b.stockno
			   		  	and b.analysisdate = date_format(now(), '%Y%m%d')
			   		  left outer join sg_trade_note c
			   		  	on a.stockno = c.stockno
			   		  left outer join sg_trade_detail k
			   		  	on c.tradeno = k.tradeno
			   		  	and k.position = '1'
			   		  left outer join sg_news_category d
			   		  	on a.stockno = d.categoryid
			   		  	and d.category = '5'
			   		  , sg_stock_code e
			where  a.stockno = e.stockno
			group by a.stockno
			order by e.stockName) oa, (select @rownum := 0) ob
	</select>
	
	<!-- 포트폴리오 정보 -->
	<select id="portInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select a.stockno as stockNo, b.stockname as stockName, a.portfolioyn as portfolioYn, a.position as position, a.positiongrade as positionGrade,
			   a.hot as hot, a.investamount as investAmount, a.buymethod as buyMethod, a.sellmethod as sellMethod, a.dividecount as divideCount, a.comment as comment
		from   sg_portfolio a, sg_stock_code b
		where  a.stockno = #{stockNo}
		and    a.stockno = b.stockno
	</select>
	
	<!-- 포트폴리오 건수 -->
    <select id="existCount" parameterType="java.util.HashMap" resultType="java.lang.Integer">
    	select count(*) from sg_portfolio
    	where stockno = #{stockNo}
    </select>

	<!-- 포트폴리오 등록 -->
	<insert id="insert_sg_portfolio" parameterType="java.util.HashMap">
		insert into sg_portfolio (stockno, portfolioyn, position, positiongrade, hot, investamount, buymethod, sellmethod, dividecount, comment)
		values(#{stockNo}, #{portfolioYn}, #{position}, #{positionGrade}, #{hot}, #{investAmount}, #{buyMethod}, #{sellMethod}, #{divideCount}, #{comment})
	</insert>
	
	<!-- 포트폴리오 수정 -->
	<update id="update_sg_portfolio" parameterType="java.util.HashMap">
		update sg_portfolio set portfolioyn = #{portfolioYn},
							    position = #{position},
							    positiongrade = #{positionGrade},
							    hot = #{hot},
							    investamount = #{investAmount},
							    buymethod = #{buyMethod},
							    sellmethod = #{sellMethod},
							    dividecount = #{divideCount},
							    comment = #{comment}
		where stockno = #{stockNo}
	</update>
	
	
	<!-- daily의견 건수 -->
	<select id="existDaily"  parameterType="java.util.HashMap" resultType="java.lang.Integer">
		select count(*) from sg_daily_analysis
		where stockno = #{stockNo}
		and   analysisdate = concat(#{dailyYear}, #{dailyMonth}, #{dailyDay})	
	</select>
	
	<!-- daily의견 등록 -->
	<insert id="insert_sg_daily_analysis" parameterType="java.util.HashMap">
		insert into sg_daily_analysis (stockno, analysisdate, position, positiongrade, dailycomment)
		values (#{stockNo}, concat(#{dailyYear}, #{dailyMonth}, #{dailyDay}), #{dailyPosition}, #{dailyPositionGrade}, #{dailyComment})
	</insert>
	
	<!-- daily의견 수정 -->
	<update id="update_sg_daily_analysis" parameterType="java.util.HashMap">
		update sg_daily_analysis set position = #{dailyPosition}, 
								 	 positiongrade = #{dailyPositionGrade}, 
								 	 dailycomment = #{dailyComment}
		where stockno = #{stockNo}
		and   analysisdate = concat(#{dailyYear}, #{dailyMonth}, #{dailyDay})
	</update>
	
	<!-- daily의견 삭제 -->
	<delete id="delete_sg_daily_analysis" parameterType="java.util.HashMap">
		delete from sg_daily_analysis
		where  stockno = #{stockNo}
		and    analysisdate = concat(#{dailyYear}, #{dailyMonth}, #{dailyDay})
	</delete>
	
	<!-- Daily의견 List -->
	<select id="dailyList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select stockno as stockNo,
			   substr(analysisdate,1,4) as dailyYear,
		       substr(analysisdate,5,2) as dailyMonth,
		       substr(analysisdate,7,2) as dailyDay,
		       position as dailyPosition,
		       positiongrade as dailyPositionGrade,
		       dailycomment as dailyComment
		from   sg_daily_analysis
		where  stockno = #{stockNo}
		order by analysisdate desc
	</select>
</mapper>
